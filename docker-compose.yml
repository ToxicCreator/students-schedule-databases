# docker-compose.yml

name: "schedule_services"
services:
  main_hub:
    container_name: "MainHub"
    image: "main_hub:1.0.0"
    build: ./services/MainHub
    command: python main.py
    volumes:
      - ./services/MainHub:/app
    ports:
      - ${MAIN_HUB_PORT}:${MAIN_HUB_PORT}
    networks:
      services-network:
        ipv4_address: ${MAIN_HUB_IP}
    env_file:
      - .env

  mongo:
    container_name: "mongo_db"
    image: mongo:latest
    networks:
      services-network:
        ipv4_address: ${MONGO_DBASE_IP}
    ports:
      - ${MONGO_DBASE_PORT_SECOND}:${MONGO_DBASE_PORT_SECOND}

  mongo_service:
    container_name: "MongoService"
    image: "mongo_service:1.0.0"
    build: ./services/MongoService
    command: python main.py
    volumes:
      - ./services/MongoService:/app
    ports:
      - ${MONGO_SERVICE_PORT}:${MONGO_SERVICE_PORT}
    networks:
      services-network:
        ipv4_address: ${MONGO_SERVICE_IP}
    env_file:
      - .env

  neo4j:
    container_name: "neo4j_db"
    image: neo4j:latest
    environment:
      - NEO4J_AUTH=${NEO4J_SERVICE_CREDENTIALS}
    networks:
      services-network:
        ipv4_address: ${NEO4J_DBASE_IP}
    ports:
      - ${NEO4J_PORT_USELESS}:${NEO4J_PORT_USELESS}
      - ${NEO4J_DBASE_PORT_SECOND}:${NEO4J_DBASE_PORT_SECOND}

  neo4j_service:
    container_name: "Neo4jService"
    image: "neo4j_service:1.0.0"
    build: ./services/Neo4jService
    command: python main.py
    volumes:
      - ./services/Neo4jService:/app
    ports:
      - ${NEO4J_SERVICE_PORT}:${NEO4J_SERVICE_PORT}
    networks:
      services-network:
        ipv4_address: ${NEO4J_SERVICE_IP}
    env_file:
      - .env

  redis:
    container_name: "redis_db"
    image: redis:latest
    networks:
      services-network:
        ipv4_address: ${REDIS_DBASE_IP}
    ports:
      - ${REDIS_DBASE_PORT}:${REDIS_DBASE_PORT}

  redis_service:
    container_name: "RedisService"
    image: "redis_service:1.0.0"
    build: ./services/RedisService
    command: python main.py
    volumes:
      - ./services/RedisService:/app
    ports:
      - ${REDIS_SERVICE_PORT}:${REDIS_SERVICE_PORT}
    networks:
      services-network:
        ipv4_address: ${REDIS_SERVICE_IP}
    env_file:
      - .env

  elastic:
    container_name: "elastic_db"
    image: elasticsearch:8.4.3
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
    networks:
      services-network:
        ipv4_address: ${ELASTIC_DBASE_IP}
    ports:
      - ${ELASTIC_DBASE_PORT}:${ELASTIC_DBASE_PORT}

  elastic_service:
    container_name: "ElasticService"
    image: "elastic_service:1.0.0"
    build: ./services/ElasticService
    command: python main.py
    volumes:
      - ./services/ElasticService:/app
    ports:
      - ${ELASTIC_SERVICE_PORT}:${ELASTIC_SERVICE_PORT}
    networks:
      services-network:
        ipv4_address: ${ELASTIC_SERVICE_IP}
    env_file:
      - .env

  postgres:
    container_name: "postgres_db"
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DBASE_NAME}
      POSTGRES_USER: ${POSTGRES_DBASE_LOGIN}
      POSTGRES_PASSWORD: ${POSTGRES_DBASE_PASSWORD}
    networks:
      services-network:
        ipv4_address: ${POSTGRES_DBASE_IP}
    ports:
      - ${POSTGRES_DBASE_PORT_FIRST}:${POSTGRES_DBASE_PORT_SECOND}

  pgsql_service:
    container_name: "PostgreSqlService"
    image: "pgsql_service:1.0.0"
    build: ./services/PostgreSqlService
    command: python main.py
    volumes:
      - ./services/PostgreSqlService:/app
    ports:
      - ${POSTGRES_SERVICE_PORT}:${POSTGRES_SERVICE_PORT}
    networks:
      services-network:
        ipv4_address: ${POSTGRES_SERVICE_IP}
    env_file:
      - .env

  filler_service:
    container_name: "Filler"
    image: "filler_service:1.0.0"
    build: ./services/Filler
    tty: true
    command: python main.py
    volumes:
      - ./services/Filler:/app
    ports:
      - ${FILLER_SERVICE_PORT}:${FILLER_SERVICE_PORT}
    networks:
      services-network:
        ipv4_address: ${FILLER_SERVICE_IP}
    env_file:
      - .env

networks:
    services-network:
      driver: bridge
      ipam:
        config:
          - subnet: ${DOCKER_SUBNET}
            gateway: ${DOCKER_GATEWAY}